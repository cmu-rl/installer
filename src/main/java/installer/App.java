/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package installer;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextArea;


public class App extends JFrame implements ActionListener {
    private JTextArea label = new JTextArea();
    private JLabel imageLabel = new JLabel();
    private JButton nextButton = new JButton("Continue");

    private LinkedList<String> commands = new LinkedList<String>();

    public App() {
        // Specify exit behavior
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // Use boxLayout
        getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.PAGE_AXIS));
        // Add a label
        label.setEditable(false);
        label.setLineWrap(true);
        label.setWrapStyleWord(true); 
        getContentPane().add(label);
        // Add an image box
        getContentPane().add(imageLabel);
        // Add a Next button (that clears the label?)
        nextButton.addActionListener(this);
        getContentPane().add(nextButton);
    }

    public void startInstallation() throws IOException {
        setVisible(true);

        InputStream in = getClass().getResourceAsStream("/resources/process.txt");
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));

        String line = "";
        while ((line = reader.readLine()) != null) { 
            commands.addLast(line);
        }

        in.close();
        processNextCommand();
    }

    public static void main(String[] args) throws IOException {
        new App().startInstallation();
    }

    private void processNextCommand() {
        if (commands.size() > 0) {
            String line = commands.removeFirst();
            System.out.println(line);
            String[] parts = line.split(":");
            String command = parts[0].trim();
            String content = "";
            if (parts.length > 1) {
                content = parts[1].trim();
            }
            // Hackish fix for URLs splitting multiple times
            if (parts.length > 2) {
                for (int idx = 2; idx< parts.length; ++idx) {
                    content += ":" + parts[idx];
                }
            }

            try {
                processCommand(command, content);
            }
            catch (IOException e) {
                showMessage("Something went wrong with the installer.");
            }
        }
        else {
            dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        }
    }

    public void processCommand(String command, String content) throws IOException {
        switch (command) {
            case "":
                processNextCommand();
                break;
            case "message":
                showMessage(content);
                break;
            case "image":
                showImage(content);
                processNextCommand();
                break;
            case "noimage":
                clearImage();
                processNextCommand();
                break;
            case "browser": 
                openURL(content);
                processNextCommand();
                break;
            case "download":
                downloadFile(content);
                processNextCommand();
                break;
            case "run":
                runJar(content);
                processNextCommand();
                break;
            case "modfolder":
                addToModFolder(content);
                processNextCommand();
                break;
            default:
                showMessage("Something went wrong with the installer. Please report this error by visiting bugs.herobraine.stream.");
                break;

        }
    }

    private void showImage(String path) throws IOException {
        InputStream stream = getClass().getResourceAsStream("/resources/" + path);

        if (stream != null) {
            BufferedImage image = ImageIO.read(stream);
            ImageIcon icon = new ImageIcon(image);

            imageLabel.setText("");
            imageLabel.setIcon(icon);
        } else {
            imageLabel.setIcon(null);
            imageLabel.setText("Failed to load tutorial image " + path);
        }

        pack();
    }

    private void clearImage() {
        imageLabel.setIcon(null);
        pack();
    }

    private void showMessage(String message) {
        // display the message to the JFrame and wait for "continue" to be clicked.
        label.setText(message);
        revalidate();
    }

    private void openURL(String url) {
        // Open the URL in the browser and wait for "continue" to be clicked.
        try {
            Desktop.getDesktop().browse(new URL(url).toURI());
        } catch (Exception e) {
            showMessage("The installer failed to open your web browser.");
        }       
    }

    private void downloadFile(String url) {
        String filename = url.substring(url.lastIndexOf("/") + 1);
        try {
            BufferedInputStream in = new BufferedInputStream(new URL(url).openStream());

            String home = System.getProperty("user.home");
            File file = new File(home+ File.separator + "Downloads" + File.separator + filename); 
            file.createNewFile();
            FileOutputStream out = new FileOutputStream(file);

            int next = 0;
            while ((next = in.read()) != -1) {
                out.write(next);
            }

            in.close();
            out.close();
            System.out.println("Download complete");
        } catch (MalformedURLException e) {
            showMessage("The installer tried to open an invalid URL." + url);
        } catch (IOException e) {
            showMessage("The installer encountered an IO error while downloading " + url);
        }

    }
    
    private void runJar(String path) {
        String fullPath =  System.getProperty("user.home") + File.separator + "Downloads" + File.separator + path;

        Process proc;
        try {
            proc = Runtime.getRuntime().exec("java -jar " + fullPath);
            BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream()));
            BufferedReader err = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
            int code = proc.waitFor();
            System.out.println("Process completed with code " + code);
            if (code != 0) {
                System.out.println("Output: ");
                String line;
                while ((line = in.readLine()) != null) {
                    System.out.println(line);
                } 
                System.out.println("Error: ");
                while ((line = err.readLine()) != null) {
                    System.out.println(line);
                } 
            }
        } catch (IOException e) {
            showMessage("The installer failed to install Minecraft Forge");
        } catch (InterruptedException e) {
            showMessage("The installer was interrupted trying to install Minecraft Forge");
        }
        processNextCommand();
    }

    private void addToModFolder(String path) {
        String fullPath =  System.getProperty("user.home") + File.separator + "Downloads" + File.separator + path;
        try {
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(new File(fullPath)));
            String pathToPut = "";
            String os = System.getProperty("os.name").toLowerCase();
            if (os.contains("win")){
                //Operating system is based on Windows
                pathToPut = System.getenv("AppData") + File.separator + ".minecraft" + File.separator;
            }
            else if (os.contains("osx")){
                //Operating system is Apple OSX based
                pathToPut = System.getProperty("user.home") + "/Library/Application Support/.minecraft/";
            }      
            else if (os.contains("nix") || os.contains("aix") || os.contains("nux")){
                //Operating system is based on Linux/Unix/*AIX
                pathToPut = System.getProperty("user.home") + "/.minecraft/";
            }


            pathToPut += "mods";
            File modDir = new File(pathToPut);
            if (!modDir.exists()) {
                modDir.mkdir();
            }
            
            pathToPut += File.separator + path;
            File file = new File(pathToPut); 
            try {
                file.createNewFile();
            } catch (IOException e) {
                showMessage("Failed to create file at " + pathToPut);
            }
            FileOutputStream out = new FileOutputStream(file);

            int next = 0;
            while ((next = in.read()) != -1) {
                out.write(next);
            }

            in.close();
            out.close();
            System.out.println(path + " installation complete");
    
        } catch (FileNotFoundException e) {
            showMessage("Mod file doesn't exist: " + path);
        } catch (IOException e) {
            showMessage("Couldn't read from mod file: " + path);
        }
   }

    // TODO disable the button while blocking operations happen

    @Override
    public void actionPerformed(ActionEvent e) {
        // When the continue button is clicked, continue installation steps
        processNextCommand();
	}
}
